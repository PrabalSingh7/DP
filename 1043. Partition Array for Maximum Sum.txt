1043. Partition Array for Maximum Sum
Medium
3.1K
224
Companies
Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]
Example 2:

Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83
Example 3:

Input: arr = [1], k = 1
Output: 1
 

Constraints:

1 <= arr.length <= 500
0 <= arr[i] <= 109
1 <= k <= arr.length
Accepted
68.8K
Submissions
96.2K
Acceptance Rate
71.5%



class Solution {
public:
    // int f(int ind, int n, vector<int> arr, vector<int> &dp, int k)  {
    //     if(ind == n)
    //         return 0;
    //     if(dp[ind]!=-1)
    //         return dp[ind];

    //     int maxEle = -1e8;
    //     int maxSum = -1e8;

    //     for(int j=ind; j<min(n,ind+k); j++) {
    //         maxEle = max(maxEle,arr[j]);
    //         int sum = ( maxEle * (j-ind+1) ) + f(j+1,n,arr,dp,k);
    //         maxSum = max(maxSum,sum);
    //     }

    //     return dp[ind] = maxSum;
    // }

    // int maxSumAfterPartitioning(vector<int>& arr, int k) {
    //     int n = arr.size();
    //     vector<int> dp (n, -1);

    //     return f(0,n,arr,dp,k);
    // }




    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> dp (n+1, 0);

        for(int ind=n-1; ind>=0; ind--) {
            int maxEle = -1e8;
            int maxSum = -1e8;

            for(int j=ind; j<min(n,ind+k); j++) {
                maxEle = max(maxEle,arr[j]);
                int sum = ( maxEle * (j-ind+1) ) + dp[j+1];
                maxSum = max(maxSum,sum);
            }

            dp[ind] = maxSum;
        }

        return dp[0];
    }


};