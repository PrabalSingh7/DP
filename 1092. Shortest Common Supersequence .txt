1092. Shortest Common Supersequence 
Hard
3.6K
56
Companies
Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
Example 2:

Input: str1 = "aaaaaaaa", str2 = "aaaaaaaa"
Output: "aaaaaaaa"
 

Constraints:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of lowercase English letters.
Accepted
71.2K
Submissions
122.7K
Acceptance Rate
58.0%





C++ || Dynamic Programming || Commented Code
_prabal_singh_
100 Days Badge 2022
12
a few seconds ago
Intuition
Approach
Firstly, find the Longest Common Sub-sequence of both the strings.
Secondly, use all the remaining characters of both strings ORDER-WISE (before, between, after) in the resultant string along with LCS characters.

Complexity
Time complexity : O(n*m + k + n + m)
Space complexity : O(n*m + k)
download (2).jfif

Code
class Solution {
public:
    string shortestCommonSupersequence(string word1, string word2) {

        int n = word1.size();
        int m = word2.size();

        // initializing dp matrix for tabulation
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        for(int i=0;i<=n;i++){
            dp[i][0] = 0;
        }
        for(int i=0;i<=m;i++){
            dp[0][i] = 0;
        }
        
        // tabulation
        for(int ind1=1;ind1<=n;ind1++){
            for(int ind2=1;ind2<=m;ind2++){
                if(word1[ind1-1]==word2[ind2-1])
                    dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];
                else
                    dp[ind1][ind2] = 0 + max(dp[ind1-1][ind2],dp[ind1][ind2-1]);
            }
        }

        // using vectors to store the indexes of characters in Common Subsequences of both strings 
        int i=n,j=m;
        vector<int> w1_used;
        vector<int> w2_used;

        while(i>0 && j>0)   {
            if(word1[i-1] == word2[j-1])    {
                w1_used.push_back(i-1);
                w2_used.push_back(j-1);
                i--;
                j--;
            }
            else if(dp[i-1][j] > dp[i][j-1])
                i--;
            else 
                j--;
        }
        
        // now forming resultant array cpnsidering the used indexes in common subsequences and rest non used indexes in both the strings
        string res;
        int sz = w1_used.size();
        for(int idx=sz-1; idx>=0; idx-- ) {
            int sv1 = 0;
            int sv2 = 0;
            int e1 = w1_used[idx];
            int e2 = w2_used[idx];
            if(idx<sz-1)    {
                sv1 = w1_used[idx+1]+1;
                sv2 = w2_used[idx+1]+1;
            }
            for(int i=sv1; i<e1; i++)   {
                res += word1[i];
            }
            for(int i=sv2; i<e2; i++)   {
                res += word2[i];
            }
            res += word1[e1];
        }
        
        int sv1 = w1_used[0];
        int sv2 = w2_used[0];
        int e1 = n;
        int e2 = m;

        for(int i=sv1+1; i<n; i++)
            res += word1[i]; 
        for(int i=sv2+1; i<m; i++)
            res += word2[i];

        return res;
    }
};
sad-thumbs-up-cat.3.meme.webp