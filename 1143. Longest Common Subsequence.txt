1143. Longest Common Subsequence
Medium
10.4K
122
Companies
Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.
Accepted
659.3K
Submissions
1.1M
Acceptance Rate
58.4%
Seen this question in a real interview before?
1/4





C++ || Dynamic Programming Explained Step by Step || Commented Code
_prabal_singh_
100 Days Badge 2022
12
a minute ago
Intuition
Complete Dynamic Programming step by step appraoch.

https://leetcode.com/problems/longest-common-subsequence/submissions/912029804/

Approach
Firstly, we will derive a recurrence relation for the problem ie two cases :
1. current element of text1 MATCHes to current element of text2 => then we will move to prev index for both strings by adding 1 [as match of current character].
2. current element of text1 NOT MATCHes to current element of text2 => then we will have two subcases : move to i-1,j AND i,j-1, take maximum of two and add nothing to it [as not a match of current character].

Secondly , we will use MEMOIZATION in this as repetative sub problems and cases . THIS WILL STILL GIVE A TLE !!!

Thirdly, we will transform this recurence relation to TABULATION [bottoms up approach]. Here, we will keep indexs as i:1->n, j:1->m instead of i:0->n-1, j:0->m-1 ; Because to handle the -ve cases in dp array.

Lastly, we will Space OPtimize it using prev and curr vectors . Thus, the T.C drops from O(exponential) to O(N*M) AND S.C = O(M).

download (2).jfif

Complexity
Time complexity : O(N*M)
Space complexity : O(M)
Code
class Solution {
public:
    //RECURSION + MEMOIZATION

    // int f(int i, int j, string s, string t, vector<vector<int>> &dp ) {
    //     //base case
    //     if(i<0 || j<0)  
    //         return 0;
    //     if(dp[i][j]!=-1)
    //         return dp[i][j];

    //     //match
    //     if(s[i]==t[j])
    //         return dp[i][j] = 1 + f(i-1,j-1,s,t,dp);
    //     //not match
    //         return dp[i][j] = 0 + max( f(i-1,j,s,t,dp), f(i,j-1,s,t,dp) );
    // }

    // int longestCommonSubsequence(string text1, string text2) {
    //     int n = text1.size();
    //     int m = text2.size();
    //     vector<vector<int>> dp (n, vector<int> (m, -1));

    //     return f(n-1,m-1,text1,text2,dp);
    // }

    // //TABLULATION
    // int longestCommonSubsequence(string text1, string text2) {
    //     int n = text1.size();
    //     int m = text2.size();
        
    //     vector<vector<int>> dp (n+1, vector<int> (m+1, -1));

    //     for(int i=0; i<=n; i++)
    //         dp[i][0] = 0;
    //     for(int j=0; j<=m; j++)
    //         dp[0][j] = 0;

    //     for(int i=1; i<=n; i++) {
    //         for(int j=1; j<=m; j++) {
    //             //match
    //             if(text1[i-1]==text2[j-1])
    //                 dp[i][j] = 1 + dp[i-1][j-1];
    //             //not match
    //             else 
    //                 dp[i][j] = 0 + max(dp[i-1][j], dp[i][j-1]);
    //         }
    //     }

    //     return dp[n][m];
    // }



    //TABLULATION + Space Optimzation
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        
        vector<int> prev (m+1, 0);
        vector<int> curr (m+1, 0);

        for(int j=0; j<=m; j++)
            prev[j] = 0;

        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m; j++) {
                //match
                if(text1[i-1]==text2[j-1])
                    curr[j] = 1 + prev[j-1];
                //not match
                else 
                    curr[j] = 0 + max(prev[j], curr[j-1]);
            }
            prev = curr;
        }

        return prev[m];
    }   
};
sad-thumbs-up-cat.3.meme.webp

0
0

