122. Best Time to Buy and Sell Stock II
Medium
10.6K
2.5K
Companies
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.
 

Constraints:

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104
Accepted
1.4M
Submissions
2.2M
Acceptance Rate
63.8%



Best Time to Buy and Sell Stock II


C++ || Dynamic Programming || Explained Approach
_prabal_singh_
100 Days Badge 2022
12
a few seconds ago
Intuition
Dynamic Programming !

Approach
Firstly, we will create the recursion relation and use memoization in it .
After that we can convert the recurence relation to Tabulation and then further Space Optimize it .

Complexity
Time complexity : O(exponential) -> O(n)
Space complexity : O(1)
images.jfif

Code
class Solution {
public:
    // int f(int i, int can_buy, vector<int> prices, vector<vector<int>> &dp)   {
    //     if(i>=prices.size())
    //         return 0;
    //     if(dp[i][can_buy]!=-1e9)
    //         return dp[i][can_buy];

    //     int profit = 0;
    //     if(can_buy==1)  {
    //         int bought = -prices[i] + f(i+1,0,prices,dp);
    //         int not_bought = f(i+1,1,prices,dp);
    //         profit = max(bought, not_bought);
    //     }
    //     else   {
    //         int sold = prices[i] + f(i+1,1,prices,dp);
    //         int not_sold = f(i+1,0,prices,dp);
    //         profit = max(sold, not_sold);
    //     }

    //     return dp[i][can_buy] = profit;
    // }

    // int maxProfit(vector<int>& prices) {
    //     int n = prices.size();
    //     vector<vector<int>> dp (n, vector<int> (2,-1e9));

    //     return f(0,1,prices,dp);
    // }





    // int maxProfit(vector<int>& prices) {
    //     int n = prices.size();
    //     vector<vector<int>> dp (n+1, vector<int> (2,0));
    //     dp[n][0] = dp[n][1] = 0;

    //     for(int i=n-1; i>=0; i--)   {
    //         for(int buy=0; buy<2; buy++)    {
    //             int profit = 0;
    //             if(buy==1)  
    //                 profit = max( -prices[i]+dp[i+1][0] , 0 + dp[i+1][1] );
    //             else 
    //                 profit = max( prices[i]+dp[i+1][1] , 0 + dp[i+1][0] );
    //             dp[i][buy] = profit;
    //         }
    //     }

    //     return dp[0][1];
    // }


    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        
        vector<int> prev(2,0);
        vector<int> curr(2,0);

        prev[0] = prev[1] = 0;

        for(int i=n-1; i>=0; i--)   {
            for(int buy=0; buy<2; buy++)    {
                int profit = 0;
                if(buy==1)  
                    profit = max( -prices[i]+prev[0] , 0 + prev[1] );
                else 
                    profit = max( prices[i]+prev[1] , 0 + prev[0] );
                curr[buy] = profit;
            }
            prev = curr;
        }

        return prev[1];
    }
};