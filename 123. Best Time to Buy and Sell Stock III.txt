123. Best Time to Buy and Sell Stock III
Hard
7.9K
153
Companies
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105
Accepted
466K
Submissions
1M
Acceptance Rate
45.4%




class Solution {
public:

    // //Recursion + Memoization
    // int f(int i, int cb, int k, vector<int> p, vector<vector<vector<int>>> &dp) {
    //     if(i>=p.size())
    //         return 0;
    //     if(k==0)
    //         return 0;
    //     if(dp[i][cb][k]!=-1)
    //         return dp[i][cb][k];

    //     int profit = 0;

    //     if(cb==1)   {
    //         int bought = -p[i] + f(i+1,0,k,p,dp);
    //         int not_bought = 0 + f(i+1,1,k,p,dp);
    //         profit = max(bought, not_bought);
    //     }
    //     else   {
    //         int sold = p[i] + f(i+1,1,k-1,p,dp);
    //         int not_sold = 0 + f(i+1,0,k,p,dp);
    //         profit = max(sold, not_sold);
    //     }

    //     return dp[i][cb][k] = profit;
    // }

    // int maxProfit(vector<int>& p) {
    //     int n = p.size();
    //     vector<vector<vector<int>>> dp (n, vector<vector<int>> (2, vector<int> (4,-1)));

    //     return f(0,1,2,p,dp);
    // }




    // //  Tabulation
    // int maxProfit(vector<int>& Arr) {
    //     int n = Arr.size();
    //     vector<vector<vector<int>>> dp(n+1,
    //                                 vector<vector<int>> 
    //                                         (2,vector<int>(3,0)));
        
    //     for(int ind = n-1; ind>=0; ind--){
    //         for(int buy = 0; buy<=1; buy++){
    //             for(int cap=1; cap<=2; cap++){
                    
    //                 if(buy==0){// We can buy the stock
    //                     dp[ind][buy][cap] = max(0+dp[ind+1][0][cap], 
    //                                 -Arr[ind] + dp[ind+1][1][cap]);
    //                 }
        
    //                 if(buy==1){// We can sell the stock
    //                     dp[ind][buy][cap] = max(0+dp[ind+1][1][cap],
    //                                 Arr[ind] + dp[ind+1][0][cap-1]);
    //                 }
    //             }
    //         }
    //     }
        
        
    //     return dp[0][0][2];
    // }


    //  Tabulation + SPace Optimization
    int maxProfit(vector<int>& Arr) {
        int n = Arr.size();
        vector<vector<int>> prev (2,vector<int>(3,0));
        vector<vector<int>> curr (2,vector<int>(3,0));
        
        for(int ind = n-1; ind>=0; ind--){
            for(int buy = 0; buy<=1; buy++){
                for(int cap=1; cap<=2; cap++){
                    
                    if(buy==0){// We can buy the stock
                        curr[buy][cap] = max(0+prev[0][cap], 
                                    -Arr[ind] + prev[1][cap]);
                    }
        
                    if(buy==1){// We can sell the stock
                        curr[buy][cap] = max(0+prev[1][cap],
                                    Arr[ind] + prev[0][cap-1]);
                    }
                }
            }
            prev = curr;
        }
        
        
        return prev[0][2];
    }
};