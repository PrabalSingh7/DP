1395. Count Number of Teams
Medium
2.4K
180
Companies
There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:

Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

 

Example 1:

Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 
Example 2:

Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.
Example 3:

Input: rating = [1,2,3,4]
Output: 4
 

Constraints:

n == rating.length
3 <= n <= 1000
1 <= rating[i] <= 105
All the integers in rating are unique.
Accepted
100.2K
Submissions
149.1K
Acceptance Rate
67.2%




C++ || Greedy + Intuition Based
_prabal_singh_
100 Days Badge 2022
15
a few seconds ago
Intuition
GREEDYYYYYY !!!!

Approach
For an index to form a team :
one element smaller in left + curr element + one element larger in right
OR
one element larger in left + curr element + one element smaller in right

And, we have to find the number of smaller & larger elememts in Left of a certain element AND the number of smaller & larger elememts in Right of a certain element.

Keeping the above in consideration , we can say the number of teams we can form using a current index will be =>

curr_idx_teams = (left_smallerright_larger) + (left_largerright_smaller)

Do this over each element and thus obtaining the number of teams possible with each index and add them to get the total.

download (2).jfif

Complexity
Time complexity : O(N*N)
Space complexity : O(1)
Code
class Solution {
public:
    int numTeams(vector<int>& rating) {
        int n = rating.size();
        int total_teams = 0;

        for(int idx=0; idx<n; idx++) {

            int left_smaller=0, left_larger=0, right_smaller=0, right_larger=0;

            for(int l=idx-1; l>=0; l--)  {
                if(rating[l]<rating[idx])   {
                    left_smaller++;
                }
                else {
                    left_larger++;
                }
            }

            for(int r=idx+1; r<n; r++)  {
                if(rating[r]<rating[idx])   {
                    right_smaller++;
                }
                else {
                    right_larger++;
                }
            }


            int curr_idx_teams = (left_smaller*right_larger) + (left_larger*right_smaller);

            total_teams += curr_idx_teams;
        }

        return total_teams;
    }
};