1749. Maximum Absolute Sum of Any Subarray
Medium
1.1K
17
Companies
You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).

Return the maximum absolute sum of any (possibly empty) subarray of nums.

Note that abs(x) is defined as follows:

If x is a negative integer, then abs(x) = -x.
If x is a non-negative integer, then abs(x) = x.
 

Example 1:

Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.
Example 2:

Input: nums = [2,-5,1,-4,3,-2]
Output: 8
Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
Accepted
30.8K
Submissions
52.6K
Acceptance Rate
58.5%



class Solution {
public:
    int maxAbsoluteSum(vector<int>& nums) {
        int size = nums.size();
        int max_so_far = INT_MIN, max_ending_here = 0;
    
        for (int i = 0; i < size; i++) {
            max_ending_here = max_ending_here + nums[i];
            if (max_so_far < max_ending_here)
                max_so_far = max_ending_here;
    
            if (max_ending_here < 0)
                max_ending_here = 0;
        }

        int min_so_far = INT_MAX, min_ending_here = 0;
    
        for (int i = 0; i < size; i++) {
            min_ending_here = min_ending_here + nums[i];
            if (min_so_far > min_ending_here)
                min_so_far = min_ending_here;
    
            if (min_ending_here > 0)
                min_ending_here = 0;
        }
        return max(max_so_far,abs(min_so_far));        
    }
};