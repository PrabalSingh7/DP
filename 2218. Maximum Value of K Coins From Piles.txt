2218. Maximum Value of K Coins From Piles
Hard
1.8K
28
Companies
There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.

In one move, you can choose any coin on top of any pile, remove it, and add it to your wallet.

Given a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.

 

Example 1:


Input: piles = [[1,100,3],[7,8,9]], k = 2
Output: 101
Explanation:
The above diagram shows the different ways we can choose k coins.
The maximum total we can obtain is 101.
Example 2:

Input: piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7
Output: 706
Explanation:
The maximum total can be obtained if we choose all coins from the last pile.
 

Constraints:

n == piles.length
1 <= n <= 1000
1 <= piles[i][j] <= 105
1 <= k <= sum(piles[i].length) <= 2000
Accepted
45.8K
Submissions
74.8K
Acceptance Rate
61.2%



class Solution {
public:

    // // RECURSION + MEMOIZATION
    // int fun(int i, int j, int k, vector<vector<int>>& piles, vector<vector<vector<int>>> &dp)    { 
    //     if(i==piles.size() || k==0 || j==piles[i].size())   { 
    //         return 0;
    //     }

    //     if(dp[i][j][k]!=-1) {
    //         return dp[i][j][k];
    //     }

    //     //pick and next
    //     int val1 = piles[i][j] + fun(i+1,0,k-1,piles,dp);
    //     //pick and dig down
    //     int val2 = piles[i][j] + fun(i,j+1,k-1,piles,dp);
    //     //not pick and next
    //     int val3 = 0 + fun(i+1,0,k,piles,dp);

    //     return dp[i][j][k] = max(val1,max(val2,val3));
    // }

    // int maxValueOfCoins(vector<vector<int>>& piles, int k) {
    //     int n = piles.size();

    //     vector<vector<vector<int>>> dp;
    //     for(int i=0; i<n; i++)  {
    //         int m = piles[i].size();
    //         vector<vector<int>> temp_dp ( m, vector<int> (k+1,-1));
    //         dp.push_back(temp_dp);
    //     }

    //     return fun(0,0,k,piles,dp);
    // }



    // TABULATION 

    int maxValueOfCoins(vector<vector<int>>& piles, int K) {
        int n = piles.size();

        vector<vector<vector<int>>> dp;
        for(int i=0; i<n; i++)  {
            int m = piles[i].size();
            vector<vector<int>> temp_dp ( m+1, vector<int> (K+1,0));
            dp.push_back(temp_dp);
        }
        vector<vector<int>> temp_dp ( n, vector<int> (K+1,0));
        dp.push_back(temp_dp);

        for(int i=n-1; i>=0; i--)   {
            for(int j=piles[i].size()-1; j>=0; j--)    {
                for(int k=K; k>0; k--)  {
                    //pick and next
                    int val1 = piles[i][j] + dp[i+1][0][k-1];  
                    //pick and dig down
                    int val2 = piles[i][j] + dp[i][j+1][k-1];  
                    //not pick and next
                    int val3 = 0 + dp[i+1][0][k]; 

                    dp[i][j][k] = max(val1,max(val2,val3));
                }
            }
        }

        return dp[0][0][K];
    }

};