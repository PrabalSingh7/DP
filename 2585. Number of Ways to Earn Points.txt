2585. Number of Ways to Earn Points
Hard
172
2
Companies
There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.

Return the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7.

Note that questions of the same type are indistinguishable.

For example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.
 

Example 1:

Input: target = 6, types = [[6,1],[3,2],[2,3]]
Output: 7
Explanation: You can earn 6 points in one of the seven ways:
- Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6
- Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6
- Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6
- Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6
- Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6
- Solve 3 questions of the 1st type: 2 + 2 + 2 = 6
- Solve 2 questions of the 2nd type: 3 + 3 = 6
Example 2:

Input: target = 5, types = [[50,1],[50,2],[50,5]]
Output: 4
Explanation: You can earn 5 points in one of the four ways:
- Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5
- Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5
- Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5
- Solve 1 question of the 2nd type: 5
Example 3:

Input: target = 18, types = [[6,1],[3,2],[2,3]]
Output: 1
Explanation: You can only earn 18 points by answering all questions.
 

Constraints:

1 <= target <= 1000
n == types.length
1 <= n <= 50
types[i].length == 2
1 <= counti, marksi <= 50
Accepted
6.6K
Submissions
10.9K
Acceptance Rate
60.1%





C++ || Dynamic Programming || Explained
_prabal_singh_
100 Days Badge 2022
12
a few seconds ago
Intuition
Step Wise Dynamic Programming Approach

Approach
Here, the greedy solution would NOT work, thus we will have to try out all possible combinations.
Firstly, create a recursion relation . Then , optimizie it by usnig memoization . It wont work because here the Time Complexity will be extremely HIGH.
Secondly, we will use TABULTION : that will convert it to O (n * target * number_of_que_of_that_type) with space O(n * target). {this will work}
Thirdly, we can further optimize it in terms of space ie from O(ntarget) we can take it to O(2target);

download (2).jfif

Complexity
Time complexity : O (n * target * number_of_que_of_that_type)
Space complexity : O(2*target)
Code
class Solution {
    int mod = 1e9+7;
public:

    // // RECURSION + MEMOIZATION : gives TLE
    // int fun(int idx, int target, vector<vector<int>> arr, vector<vector<int>> &dp) {

    //     if(idx==0)  {
    //         if(target%arr[0][1]==0)  {
    //             if(target/arr[0][1] <= arr[0][0])
    //                 return 1;
    //         }
    //         return 0;
    //     }

    //     if(dp[idx][target]!=-1)
    //         return dp[idx][target];

    //     int mxq = arr[idx][0];
    //     int val = arr[idx][1];
    //     int take = 0;

    //     int not_take = fun(idx-1,target,arr,dp);
    //     for(int i=1; val*i <= target && i<=mxq; i++)  {
    //         int curr = fun(idx-1,target-(val*i),arr,dp);
    //         if(curr>0)
    //             take += curr;
    //         take %= mod;
    //     }

    //     return dp[idx][target] = (take + not_take) % mod;
    // }

    // int waysToReachTarget(int target, vector<vector<int>>& arr) {
    //     int n = arr.size();

    //     vector<vector<int>> dp (n, vector<int> (target+1,-1));

    //     int res = fun(n-1,target,arr,dp);
        
    //     return res>=1e8 ? -1 : res;
    // }





    //  TABULATION  + SPACE OPTIMIZATION
    int waysToReachTarget(int target, vector<vector<int>>& arr) {
        int n = arr.size();

        vector<int> prev (target+1,0);
        vector<int> curr (target+1,0);

        for(int i=0; i<target+1; i++)  {
            if(i%arr[0][1]==0 && i/arr[0][1]<=arr[0][0])
                prev[i] = 1;
        }

        for(int idx=1; idx<n; idx++)  {
            int val = arr[idx][1];
            int mq = arr[idx][0];
            for(int t=0; t<=target; t++)    {
                int not_take = prev[t]; 

                int take = 0;
                for(int i=1; val*i<=t && i<=mq ; i++)  {
                    int curr = prev[t-(val*i)];
                    take += curr;
                    take %= mod;
                }

                curr[t] = (take + not_take) % mod;
            }

            prev = curr;
        }
        
        return prev[target];
    }
};
images.jfif

0
0

