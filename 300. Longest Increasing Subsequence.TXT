300. Longest Increasing Subsequence
Medium
16.6K
305
Companies
Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-104 <= nums[i] <= 104
 

Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?

Accepted
1.2M
Submissions
2.2M
Acceptance Rate
52.1%





class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();

        vector<int> dp(n,1);
        vector<int> hash(n,-1);

        for(int i=0; i<n; i++)
            hash[i] = i;

        for(int i=0; i<n; i++)  {
            for(int prev=0; prev<i; prev++) {
                if(nums[prev]<nums[i])  {
                    if(dp[prev]+1>dp[i])    {
                        dp[i] = dp[prev]+1;
                        hash[i] = prev;
                    }
                }
            }
        }

        int res = -1e9;
        int res_idx = -1;
        for(int i=0; i<n; i++)      {
            if(dp[i]>res)   {
                res = dp[i];
                res_idx = i;
            }
        }

        //FOR PRINTING THE SUB SEQUENCE

        // int idx = res_idx;
        // vector<int> vec;
        
        // while(hash[idx]!=idx)    {
        //     vec.push_back(nums[idx]);
        //     idx = hash[idx];
        // }
        // vec.push_back(nums[idx]);
        
        // reverse(vec.begin(), vec.end());
        // for(auto i : vec)
        //     cout<<i<<" ";

        return res;
    }
};