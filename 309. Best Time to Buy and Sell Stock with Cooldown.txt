309. Best Time to Buy and Sell Stock with Cooldown
Medium
8.1K
274
Companies
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
Example 2:

Input: prices = [1]
Output: 0
 

Constraints:

1 <= prices.length <= 5000
0 <= prices[i] <= 1000
Accepted
393.6K
Submissions
700.7K
Acceptance Rate
56.2%



Best Time to Buy and Sell Stock with Cooldown


C++ || Dynamic Programming || Explained Recusion => Space Optimization || Commented Code!
_prabal_singh_
100 Days Badge 2022
13
a few seconds ago
Intuition
Dynamic Programming Step by Step !

Approach
Form the Recurrence Relation :-
1.1 Base Case : if i reaches outside the array
1.2Recurrence Case 1 : (BUYing)
1.1.1. buy current -> -p[i] + f(i+1,can NOT buy for next)
1.1.2. NOT buy current -> 0 + f(i+1,can buy for next)
1.2Recurrence Case 1 : (SELLing)
1.1.1. sell current -> +p[i] && move to i+2 (not i+1)
1.1.2. NOT sell current -> 0 && move to i+1

Use MEMOIZATION to optimize it, so that it does NOT give TLE !
Use a 2D matrix of [n][2]

Convert it to Bottoms Up approach ie TABULATION , this will further optimize it buy removing the stack space !
Use a 2D matrix of [n+2][2] //n+2 beacuse of relation i->i+2

(Optional) We can further Space optimize it by using 3 pairs(or array(s) of size = 2).
Ahead2 -> i+2 th state
Ahead -> i+1 th state
Curr -> i th state.

download (1).jfif
download (1).jfif

Complexity
Time complexity : O(exponential) => O(2*n)
Space complexity : O(1)*3
Code
class Solution {
public:

    //  RECURSION + MEMOIZATION
    // int f(int i, int cb, vector<int> p, vector<vector<int>> &dp, int n)    {

    //     if(i>=n)
    //         return 0;
    //     if(dp[i][cb] != -1)
    //         return dp[i][cb];

    //     int profit = 0;
        
    //     //CAN BUY
    //     if(cb==1)   {
    //         int bought = -p[i] + f(i+1,0,p,dp,n);      //bought current 
    //         int not_bought = 0 + f(i+1,1,p,dp,n);      //not bought current
    //         profit = max(bought, not_bought);
    
    //         return dp[i][cb] = profit;
    //     }

    //     //CAN SELL  
    //     else  {
    //         int sold = +p[i] + f(i+2,1,p,dp,n);     //sold current & thus updated ls
    //         int not_sold = 0 + f(i+1,0,p,dp,n);     //not sold current 
    //         profit = max(sold, not_sold);
    
    //         return dp[i][cb] = profit;
    //     }

    // }

    // int maxProfit(vector<int>& prices) {
    //     int n = prices.size();

    //     vector<vector<int>> dp (n, vector<int> (2, -1) );
    //     return f(0,1,prices,dp,n);
    // }






    //  TABULATION
    // int maxProfit(vector<int>& p) {
    //     int n = p.size();
    //     vector<vector<int>> dp (n+2, vector<int> (2, 0) );
        
    //     for(int i=n-1; i>=0; i--)   {
    //         for(int cb=0; cb<=1; cb++)  {
    //             int profit = 0;

    //              //CAN BUY
    //             if(cb==1)   {
    //                 int bought = -p[i] + dp[i+1][0];      //bought current 
    //                 int not_bought = 0 + dp[i+1][1];     //not bought current
    //                 profit = max(bought, not_bought);
    
    //                 dp[i][cb] = profit;
    //             }

    //             //CAN SELL  
    //             else  {
    //                 int sold = +p[i] + dp[i+2][1];   //sold current & thus updated ls
    //                 int not_sold = 0 + dp[i+1][0];   //not sold current 
    //                 profit = max(sold, not_sold);

    //                 dp[i][cb] = profit;
    //             }
    //         }
    //     }


    //     return dp[0][1];  
    // }






    //  TABULATION + Space Optimization
    int maxProfit(vector<int>& p) {
        int n = p.size();
        

        vector<int> ahead2(2, 0);
        vector<int> ahead(2, 0);
        vector<int> curr(2, 0);
        
        for(int i=n-1; i>=0; i--)   {
            for(int cb=0; cb<=1; cb++)  {
                int profit = 0;

                //CAN BUY
                if(cb==1)   {
                    int bought = -p[i] + ahead[0];      //bought current 
                    int not_bought = 0 + ahead[1];     //not bought current
                    profit = max(bought, not_bought);
                    
                    curr[cb] = profit;
                }

                //CAN SELL  
                else  {
                    int sold = +p[i] + ahead2[1];   //sold current & thus updated ls
                    int not_sold = 0 + ahead[0];   //not sold current 
                    profit = max(sold, not_sold);

                    curr[cb] = profit;
                }
            }
            ahead2 = ahead;
            ahead = curr;
        }

        return ahead[1];  
    }
};
images.jfif

0
0

