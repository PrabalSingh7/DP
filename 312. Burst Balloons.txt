312. Burst Balloons
Hard
7.5K
190
Companies
You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

 

Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
Example 2:

Input: nums = [1,5]
Output: 10
 

Constraints:

n == nums.length
1 <= n <= 300
0 <= nums[i] <= 100
Accepted
223.1K
Submissions
391.6K
Acceptance Rate
57.0%



class Solution {
public:

    // //  recursion + memoization will give us TLE !

    // int f (int i, int j, vector<int> nums, vector<vector<int>> &dp)    {
    //     if(i>j) 
    //         return 0;
    //     if(dp[i][j]!=-1)
    //         return dp[i][j];

    //     int maxi = -1e9;

    //     for(int idx=i; idx<=j; idx++)  {
    //         int val = nums[i-1] * nums[idx] * nums[j+1]
    //                     + f(i,idx-1,nums,dp)
    //                     + f(idx+1,j,nums,dp);
    //         maxi = max(maxi,val);
    //     }

    //     return dp[i][j] = maxi;
    // }


    // int maxCoins(vector<int>& nums) {
    //     nums.insert(nums.begin(),1);
    //     nums.push_back(1);
    //     int m = nums.size();
    //     vector<vector<int>> dp(m, vector<int> (m,-1));

    //     return f(1,m-2,nums,dp);
    // }







    int maxCoins(vector<int>& nums) {
        nums.insert(nums.begin(),1);
        nums.push_back(1);
        int m = nums.size();
        vector<vector<int>> dp(m, vector<int> (m,0));

        for(int i=m-2; i>=1; i--)   {
            for(int j=i; j<m-1; j++)    {
                int maxi = -1e9;

                for(int idx=i; idx<=j; idx++)  {
                    int val = nums[i-1] * nums[idx] * nums[j+1]
                                + dp[i][idx-1] 
                                + dp[idx+1][j] ;
                    maxi = max(maxi,val);
                }

                dp[i][j] = maxi;
            }
        }

        return dp[1][m-2]; 
    }
};