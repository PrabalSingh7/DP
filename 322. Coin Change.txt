322. Coin Change
Medium
15.5K
359
Companies
You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1
Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104
Accepted
1.3M
Submissions
3.2M
Acceptance Rate
42.0%






C++ || Dynamic Programming || Explained
_prabal_singh_
100 Days Badge 2022
12
a minute ago
Intuition
Step wise Dynamic Programming Approach.

Approach
Here, the greedy solution would NOT work, thus we will have to try out all possible combinations.
Firstly, create a recursion relation . Then , optimizie it by usnig memoization . It wont work because here the Time Complexity will be extremely HIGH.
Secondly, we will use TABULTION : that will convert it to O (n * amount * highest_possible_occurence) with space O(namount). {this will work}
Thirdly, we can further optimize it in terms of space ie from O(namount) we can take it to O(2*amount);

Complexity
Time complexity : O (n * amount * highest_possible_occurence)
Space complexity : O(amount)
Code
class Solution {
public:

    // RECURSION + MEMOIZATION : gives TLE
    // int fun(int idx, int amount, vector<int> coins, vector<vector<int>> &dp) {

    //     if(idx==0)  {
    //         if(amount%coins[0]==0)  {
    //             return amount/coins[0];
    //         }
    //         return 1e8;
    //     }

    //     if(dp[idx][amount]!=-1)
    //         return dp[idx][amount];

    //     int val = coins[idx];
    //     int take = 1e8;

    //     int not_take = fun(idx-1,amount,coins,dp);
    //     for(int i=1; val*i <= amount; i++)  {
    //         int curr = i + fun(idx-1,amount-(val*i),coins,dp);
    //         if(curr>-1)
    //             take = min(take, curr);
    //     }

    //     return dp[idx][amount] = min(take,not_take);
    // }

    // int coinChange(vector<int>& coins, int amount) {
    //     int n = coins.size();

    //     vector<vector<int>> dp (n, vector<int> (amount+1,-1));

    //     int res = fun(n-1,amount,coins,dp);
        
    //     return res>=1e8 ? -1 : res;
    // }


    // //  TABULATION  
    // int coinChange(vector<int>& coins, int amount) {
    //     int n = coins.size();
    //     vector<vector<int>> dp (n, vector<int> (amount+1,1e8));

    //     for(int i=0; i<amount+1; i++)  {
    //         if(i%coins[0]==0)
    //             dp[0][i] = i/coins[0];
    //     }

    //     for(int idx=1; idx<n; idx++)  {
    //         int val = coins[idx];
    //         for(int amt=0; amt<amount+1; amt++)    {
    //             int not_take = dp[idx-1][amt]; 

    //             int take = 1e8;
    //             for(int i=1; val*i <= amt; i++)  {
    //                 int curr = i + dp[idx-1][amt-(val*i)];
    //                 if(curr>-1)
    //                     take = min(take, curr);
    //             }

    //             dp[idx][amt] = min(take,not_take);
    //         }
    //     }
        
    //     return dp[n-1][amount]!=1e8 ? dp[n-1][amount] : -1;
    // }


    //  TABULATION  + SPACE OPTIMIZATION
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();

        vector<int> prev (amount+1,1e8);
        vector<int> curr (amount+1,1e8);

        for(int i=0; i<amount+1; i++)  {
            if(i%coins[0]==0)
                prev[i] = i/coins[0];
        }

        for(int idx=1; idx<n; idx++)  {
            int val = coins[idx];
            for(int amt=0; amt<amount+1; amt++)    {
                int not_take = prev[amt]; 

                int take = 1e8;
                for(int i=1; val*i <= amt; i++)  {
                    int curr = i + prev[amt-(val*i)];
                    if(curr>-1)
                        take = min(take, curr);
                }

                curr[amt] = min(take,not_take);
            }

            prev = curr;
        }
        
        return prev[amount]!=1e8 ? prev[amount] : -1;
    }
};