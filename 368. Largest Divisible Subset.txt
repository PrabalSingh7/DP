368. Largest Divisible Subset
Medium
4.3K
172
Companies
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.
Accepted
175.5K
Submissions
423.1K
Acceptance Rate
41.5%



class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();

        vector<int> dp(n,1);
        vector<int> hash(n,-1);

        for(int i=0; i<n; i++)
            hash[i] = i;

        for(int i=0; i<n; i++)  {
            for(int prev=0; prev<i; prev++) {
                if(nums[i]%nums[prev]==0)  {
                    if(dp[prev]+1>dp[i])    {
                        dp[i] = dp[prev]+1;
                        hash[i] = prev;
                    }
                }
            }
        }

        int res = -1e9;
        int res_idx = -1;
        for(int i=0; i<n; i++)      {
            if(dp[i]>res)   {
                res = dp[i];
                res_idx = i;
            }
        }

        // FOR PRINTING THE SUB SEQUENCE

        int idx = res_idx;
        vector<int> vec;
        
        while(hash[idx]!=idx)    {
            vec.push_back(nums[idx]);
            idx = hash[idx];
        }
        vec.push_back(nums[idx]);
        
        reverse(vec.begin(), vec.end());
        for(auto i : vec)
            cout<<i<<" ";

        return vec;
    }
};