377. Combination Sum IV
Medium
5.6K
569
Companies
Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

The test cases are generated so that the answer can fit in a 32-bit integer.

 

Example 1:

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.
Example 2:

Input: nums = [9], target = 3
Output: 0
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 1000
All the elements of nums are unique.
1 <= target <= 1000
 

Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?

Accepted
355.9K
Submissions
681.9K
Acceptance Rate
52.2%


class Solution {
public:
    // int fun(int target , vector<int> nums, vector<int> &dp) {
    //     if(target==0)  {
    //         return 1;
    //     }
    //     if(target<0)   {
    //         return 0;
    //     }

    //     if(dp[target] != -1)
    //         return dp[target];

    //     int ret_val = 0;
    //     for(int idx=0; idx<nums.size(); idx++)  {
    //         ret_val += fun(target-nums[idx],nums,dp);
    //     }

    //     return dp[target] =  ret_val;
    // }

    // int combinationSum4(vector<int>& nums, int target) {
    //     int n = nums.size();

    //     vector<int> dp (target+1, -1);

    //     return fun(target,nums,dp);
    // }

    
    long mod = (1e10+7);

    int combinationSum4(vector<int>& nums, int target) {
        vector<long> dp (target+1, 0);
        dp[0] = 1;

        for(int tar=1; tar<target+1; tar++)    { 
            for(int idx=0; idx<nums.size(); idx++)  {
                if(tar-nums[idx]>=0)
                    dp[tar] += dp[tar-nums[idx]];  
                dp[tar] %= mod;
            } 
        }

        return dp[target];
    }
};