416. Partition Equal Subset Sum
Medium
10K
173
Companies
Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100
Accepted
596.8K
Submissions
1.3M
Acceptance Rate
46.3%




C++ || Dynamic Programming
_prabal_singh_
100 Days Badge 2022
9
a few seconds ago
Intuition
Approach
Complexity
Time complexity : O(n*sum/2)
Space complexity : O(sum/2)
Code
class Solution {
public:

    // //GREEDY APPRAOCH : wont work!
    // bool canPartition(vector<int>& nums) {
    //     sort(nums.begin(), nums.end());
    //     int n = nums.size();

    //     vector<int> preSum (n+1,0);
    //     int curr = 0;

    //     for(int i=0; i<n; i++)  {
    //         curr += nums[i];
    //         preSum[i+1] = curr;
    //     }

    //     for(int i=1; i<n+1; i++)  {
    //         int ls = preSum[i-1];
    //         int rs = curr - preSum[i-1];
    //         if(ls==rs)
    //             return true;
    //     }        

    //     return false;
    // }


    // //RECCURSIVE + MEMOIZATION gave TLE
    // bool fun(int idx, int curr, int target, vector<int> nums, vector<vector<int>> &dp)  {
    //     if(idx==-1)  {
    //         if(curr==target)  {
    //             return true;
    //         }
    //         return false;
    //     }

    //     if(curr>target)
    //         return false;

    //     if(dp[idx][curr] != -1)  {
    //         return dp[idx][curr];
    //     }

    //     int val = nums[idx];

    //     bool take = fun(idx-1,curr+val,target,nums,dp);
    //     bool not_take = fun(idx-1,curr,target,nums,dp);

    //     return dp[idx][curr] = take || not_take;
    // }

    // bool canPartition(vector<int>& nums) {
    //     int n = nums.size();
    //     if(n==1)    {
    //         return false;
    //     }

    //     int sum = 0;
    //     for(int i=0; i<n; i++)  {
    //         sum += nums[i];
    //     }


    //     if(sum%2==0)    {
    //         vector<vector<int>> dp (n, vector<int> (sum,-1));
    //         return fun(n-1,0,sum/2,nums,dp);
    //     }
    //     return false;
    // }



    // bool canPartition(vector<int>& nums) {
    //     int n = nums.size();
    //     if(n==1)    {
    //         return false;
    //     }

    //     int maxi = 0;
    //     int sum = 0;
    //     for(int i=0; i<n; i++)  {
    //         sum += nums[i];
    //         maxi = max(maxi,nums[i]);
    //     }

    //     if(sum%2!=0)    {
    //         return false;
    //     }
    //     if(maxi>sum/2)  {
    //         return false;
    //     }

    //     vector<vector<bool>> dp (n, vector<bool> ((sum/2)+1,false));
    //     for(int i=0; i<n; i++)   {
    //         dp[i][0] = 1;
    //     }
    //     dp[0][nums[0]] = 1;

    //     for(int i=1; i<n; i++)  {
    //         int val = nums[i];
    //         for(int curr=1; curr<=sum/2; curr++)  {
    //             bool not_take = dp[i-1][curr];
    //             //taking case check
    //             if(dp[i-1][curr]==1 && curr+val<=sum/2)
    //                 dp[i][curr+val] = true;
                
    //             dp[i][curr] = dp[i][curr] || not_take;

    //             if(curr==val)
    //                 dp[i][curr] = true;
    //         }
    //     }

    //     return dp[n-1][sum/2];
    // }    



    // SPACE OPTIMIZING THE TABULATION 
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        if(n==1)    {
            return false;
        }

        int maxi = 0;
        int sum = 0;
        for(int i=0; i<n; i++)  {
            sum += nums[i];
            maxi = max(maxi,nums[i]);
        }

        if(sum%2!=0)    {
            return false;
        }
        if(maxi>sum/2)  {
            return false;
        }

        vector<bool> prev ((sum/2)+1,false);
        vector<bool> curr ((sum/2)+1,false);
        
        prev[nums[0]] = 1;
        curr[0] = prev[0] = 0;

        for(int i=1; i<n; i++)  {
            int val = nums[i];
            for(int j=1; j<=sum/2; j++)  {
                bool not_take = prev[j];
                //taking case check
                if(prev[j]==1 && j+val<=sum/2)
                    curr[j+val] = true;
                
                curr[j] = curr[j] || not_take;

                if(j==val)
                    curr[j] = true;
            }
            prev = curr;
        }

        return prev[sum/2];
    }    
};