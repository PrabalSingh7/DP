516. Longest Palindromic Subsequence
Medium
7K
274
Companies
Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".
Example 2:

Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".
 

Constraints:

1 <= s.length <= 1000
s consists only of lowercase English letters.
Accepted
323.9K
Submissions
531.2K
Acceptance Rate
61.0%





C++ || Dynamic Programming
_prabal_singh_
100 Days Badge 2022
12
a few seconds ago
Intuition
Approach
Instead of finding longest palindromic subsequence in that string , we can find longest common subsequence in itself and its reverse string.

Complexity
Time complexity : O(N*N)
Space complexity : O(N*N)
Code
class Solution {
public:
    //  RECURSION + MEMOIZATION
    // int f(int i, int j, string s, vector<vector<int>> &dp)   {
    //     //base case
    //     if(i==j)    
    //         return 1;
    //     if(i>j)
    //         return 0;

    //     if(dp[i][j]!=-1)
    //         return dp[i][j];

    //     //match
    //     if(s[i]==s[j])  
    //         return dp[i][j] = 2 + f(i+1, j-1, s, dp);
    //     //not match
    //     return dp[i][j] = 0 + max( f(i,j-1,s,dp), f(i+1,j,s,dp) );
    // }

    // int longestPalindromeSubseq(string s) {
    //     int n = s.size();
    //     vector<vector<int>> dp (n, vector<int> (n,-1));

    //     return f(0,n-1,s,dp);
    // }


    // TABULATION
    int longestPalindromeSubseq(string s) {
        int n = s.size();

        string s1 = s;
        string s2 = s;
        reverse(s2.begin(), s2.end());
   
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        for(int i=0;i<=n;i++){
            dp[i][0] = 0;
        }
        for(int i=0;i<=n;i++){
            dp[0][i] = 0;
        }
        
        for(int ind1=1;ind1<=n;ind1++){
            for(int ind2=1;ind2<=n;ind2++){
                if(s1[ind1-1]==s2[ind2-1])
                    dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];
                else
                    dp[ind1][ind2] = 0 + max(dp[ind1-1][ind2],dp[ind1][ind2-1]);
            }
        }

        return dp[n][n];
    }

};