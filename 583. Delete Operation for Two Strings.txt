583. Delete Operation for Two Strings
Medium
4.9K
73
Companies
Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

 

Example 1:

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Example 2:

Input: word1 = "leetcode", word2 = "etco"
Output: 4
 

Constraints:

1 <= word1.length, word2.length <= 500
word1 and word2 consist of only lowercase English letters.
Accepted
199.3K
Submissions
333.8K
Acceptance Rate
59.7%




C++ || Longest Common Subsequence Variation || Dynamic Programming
_prabal_singh_
100 Days Badge 2022
12
a few seconds ago
Intuition
Approach
The number of characters that are to be deleted is equal to total length of strings - lcs*2.

Complexity
Time complexity : O(N*M)
Space complexity : O(N*M)
Code
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
   
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        for(int i=0;i<=n;i++){
            dp[i][0] = 0;
        }
        for(int i=0;i<=m;i++){
            dp[0][i] = 0;
        }
        
        for(int ind1=1;ind1<=n;ind1++){
            for(int ind2=1;ind2<=m;ind2++){
                if(word1[ind1-1]==word2[ind2-1])
                    dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];
                else
                    dp[ind1][ind2] = 0 + max(dp[ind1-1][ind2],dp[ind1][ind2-1]);
            }
        }

        return (n-dp[n][m]) + (m-dp[n][m]);
    }
};