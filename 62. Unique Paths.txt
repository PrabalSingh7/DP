62. Unique Paths
Medium
13.1K
374
Companies
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 

Constraints:

1 <= m, n <= 100
Accepted
1.3M
Submissions
2.1M
Acceptance Rate
62.6%





C++ || RECURSION -> MEMOIZATION -> TABULATION -> SPACE OPTIMIZATION
_prabal_singh_
100 Days Badge 2022
4
a few seconds ago
Intuition
Approach
Complexity
Time complexity : O(result) -> O(m*n)
Space complexity : O(m*n) -> O(m+n)
Code
class Solution {
public:

    // // //RECUSRION + MEMOIZATION
    // int fun(int r, int c, int n, int m,vector<vector<int>> &dp)  {
    //     if(r<0 || r>=n || c <0 || c>= m)    {
    //         return 0;
    //     }

    //     if(dp[r][c] != -1)  {
    //         return dp[r][c];
    //     }
    //     if(r==0 && c==0)    {
    //         return 1;
    //     }

    //     int up = fun(r-1,c,n,m,dp);
    //     int left = fun(r,c-1,n,m,dp);

    //     return dp[r][c] = up+left;
    // }

    // int uniquePaths(int m, int n) {
    //     int r = n-1;
    //     int c = m-1;
    //     vector<vector<int>> dp (n, vector<int> (m,-1));

    //     for(int i=0; i<n; i++)
    //         dp[i][0] = 1;
    //     for(int i=0; i<m; i++)
    //         dp[0][i] = 1;

    //     return fun(r,c,n,m,dp);
    // }




    // // TABULATION
    // int uniquePaths(int m, int n) {
    //     // int r = n-1;
    //     // int c = m-1;
    //     vector<vector<int>> dp (n, vector<int> (m,-1));

    //     for(int i=0; i<n; i++)
    //         dp[i][0] = 1;
    //     for(int i=0; i<m; i++)
    //         dp[0][i] = 1;
        
    //     for(int i=1; i<n; i++)  {
    //         for(int j=1; j<m; j++)  {
    //             int up = dp[i][j-1];
    //             int left = dp[i-1][j];
    //             dp[i][j] = up + left;
    //         }
    //     }

    //     return dp[n-1][m-1];
    //     // return fun(r,c,n,m,dp);
    // }




    // SPACE OPTIMIZATION
    int uniquePaths(int m, int n) {
        vector<int> prev2(m,1);
        vector<int> prev(n,1);

        for(int i=1; i<m; i++)  {
            for(int j=1; j<n; j++)  {
                int curr = prev[j] + prev2[i];
                prev[j] = curr;
                prev2[i] = curr;
            }
        }

        return prev[n-1];
    }
};