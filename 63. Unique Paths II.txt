63. Unique Paths II
Medium
6.7K
429
Companies
You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
Example 2:


Input: obstacleGrid = [[0,1],[0,0]]
Output: 1
 

Constraints:

m == obstacleGrid.length
n == obstacleGrid[i].length
1 <= m, n <= 100
obstacleGrid[i][j] is 0 or 1.
Accepted
655.8K
Submissions
1.7M
Acceptance Rate
39.3%





C++ || RECURSION -> MEMOIZATION -> TABULATION
_prabal_singh_
100 Days Badge 2022
7
a few seconds ago
Intuition
Approach
Complexity
Time complexity : O(n*m)
Space complexity : O(n*m)
Code
class Solution {
public:

    // // RECURSION
    // int recursion(int r, int c, int n, int m, vector<vector<int>> grid) {
    //     if(r<0 || r>=n || c<0 || c>=m)    {return 0;}
    //     if(grid[r][c]==1)   {return 0;}

    //     if(r==0 && c==0)    {   return 1;}

    //     int up = recursion(r-1,c,n,m,grid);
    //     int right = recursion(r,c-1,n,m,grid);

    //     return up+right;
    // }

    // int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
    //     int n = obstacleGrid.size();    
    //     int m = obstacleGrid[0].size();

    //     return recursion(n-1,m-1,n,m,obstacleGrid);    
    // }




    // // RECURSION & MEMOIZATION
    // int memoization(int r, int c, int n, int m, vector<vector<int>> grid, vector<vector<int>> &dp) {
    //     if(r<0 || r>=n || c<0 || c>=m)    { return 0;   }
    //     if(grid[r][c]==1)   {   return 0;  }
        
    //     if(dp[r][c]!=-1)    {   return dp[r][c];    }

    //     int up = memoization(r-1,c,n,m,grid,dp);
    //     int right = memoization(r,c-1,n,m,grid,dp);

    //     return dp[r][c] = up+right;
    // }

    // int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
    //     int n = obstacleGrid.size();    
    //     int m = obstacleGrid[0].size();
    //     vector<vector<int>> dp (n, vector<int> (m,-1));

    //     for(int i=0; i<n; i++){
    //         for(int j=0; j<m; j++)  {
    //             if(obstacleGrid[i][j]==1)
    //                 dp[i][j] = 0;
    //         }
    //     }
    //     dp[0][0] = 1;

    //     return memoization(n-1,m-1,n,m,obstacleGrid,dp);    
    // }




    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();    
        int m = obstacleGrid[0].size();
        vector<vector<int>> dp (n, vector<int> (m,0));

        int r=101,c=101;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++)  {
                if(obstacleGrid[i][j]==1)
                    dp[i][j] = 0;
                if(i==0)    {
                    if(obstacleGrid[i][j]==1){
                        r = min(r,j);
                    }
                }
                if(j==0)    {
                    if(obstacleGrid[i][j]==1)   {
                        c = min(c,i);
                    }
                }
            }
        }
                        // cout<<"row "<<r<<"\n";
                        // cout<<"col "<<c<<"\n";


            for(int i=0; i<m; i++)  {
                if(i<r)
                    dp[0][i] = 1;
                else 
                    dp[0][i] = 0;
            }
        
        
        
            for(int i=0; i<n; i++)  {
                if(i<c)
                    dp[i][0] = 1;
                else 
                    dp[i][0] = 0;
            }

        if(obstacleGrid[0][0]==0)
            dp[0][0] = 1;

        // for(int i=0; i<n; i++){
        //     for(int j=0; j<m; j++)  {
        //         cout<<dp[i][j]<<" ";
        //     }
        //     cout<<"\n";
        // }

        for(int i=1; i<n; i++){
            for(int j=1; j<m; j++)  {
                if(obstacleGrid[i][j]==1)   
                    continue;
                int up = dp[i-1][j];
                int right = dp[i][j-1];
                dp[i][j] = up+right;
            }
        }
        

        return dp[n-1][m-1];    
    }
};