673. Number of Longest Increasing Subsequence
Medium
4.6K
201
Companies
Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:

Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.
 

Constraints:

1 <= nums.length <= 2000
-106 <= nums[i] <= 106
Accepted
140.5K
Submissions
328.6K
Acceptance Rate
42.8%


class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size();

        vector<int> dp(n,1);
        vector<int> cnt(n,1);
        int maxi = -1;

        for(int i=0; i<n; i++)  {
            for(int prev=0; prev<i; prev++) {
                if(nums[prev]<nums[i])  {
                    if(dp[prev]+1>dp[i])    {
                        dp[i] = dp[prev]+1;
                        cnt[i] = cnt[prev];
                    }
                    else if(dp[prev]+1 == dp[i])    {
                        cnt[i] += cnt[prev];
                    }
                }
            }
            maxi = max(maxi,dp[i]);
        }

        int nos = 0; 
        for(int i=0; i<n; i++)      {
            if(dp[i]==maxi)   {
                nos += cnt[i];
            }
        }

        return nos;       
    }
};