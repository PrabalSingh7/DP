714. Best Time to Buy and Sell Stock with Transaction Fee
Medium
5.1K
128
Companies
You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
 

Constraints:

1 <= prices.length <= 5 * 104
1 <= prices[i] < 5 * 104
0 <= fee < 5 * 104
Accepted
219.8K
Submissions
337.9K
Acceptance Rate
65.0%




class Solution {
public:
    // Recurssion + Memoization
    // int f(int i, int can_buy, vector<int> prices, vector<vector<int>> &dp, int fee, int n)   {
    //     if(i>=n)
    //         return 0;
    //     if(dp[i][can_buy]!=-1e9)
    //         return dp[i][can_buy];

    //     int profit = 0;
    //     if(can_buy==1)  {
    //         int bought = -prices[i] + f(i+1,0,prices,dp,fee,n);
    //         int not_bought = f(i+1,1,prices,dp,fee,n);
    //         profit = max(bought, not_bought);
    //     }
    //     else   {
    //         int sold = prices[i] + f(i+1,1,prices,dp,fee,n) - fee;
    //         int not_sold = f(i+1,0,prices,dp,fee,n);
    //         profit = max(sold, not_sold);
    //     }

    //     return dp[i][can_buy] = profit;
    // }

    // int maxProfit(vector<int>& prices, int fee) {
    //     int n = prices.size();
    //     vector<vector<int>> dp (n, vector<int> (2,-1e9));

    //     return f(0,1,prices,dp,fee,n);
    // }



    //Tabulation
    // int maxProfit(vector<int>& prices, int fee) {
    //     int n = prices.size();
    //     vector<vector<int>> dp (n+1, vector<int> (2,0));

    //     for(int i=n-1; i>=0; i--)   {
    //         for(int can_buy=0; can_buy<=1; can_buy++)   {
    //             int profit = 0;

    //             if(can_buy==1)  {
    //                 int bought = -prices[i] + dp[i+1][0];
    //                 int not_bought = dp[i+1][1];
    //                 profit = max(bought, not_bought);
    //             }
    //             else   {
    //                 int sold = prices[i] + dp[i+1][1] - fee;
    //                 int not_sold = dp[i+1][0]; 
    //                 profit = max(sold, not_sold);
    //             }

    //             dp[i][can_buy] = profit;                
    //         }
    //     }
        
    //     return dp[0][1];
    // }



    //Tabulation + Space Optimization
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        
        vector<int> ahead (2,0);
        vector<int> curr (2,0);

        for(int i=n-1; i>=0; i--)   {
            for(int can_buy=0; can_buy<=1; can_buy++)   {
                int profit = 0;

                if(can_buy==1)  {
                    int bought = -prices[i] + ahead[0];
                    int not_bought = ahead[1];
                    profit = max(bought, not_bought);
                }
                else   {
                    int sold = prices[i] + ahead[1] - fee;
                    int not_sold = ahead[0]; 
                    profit = max(sold, not_sold);
                }

                curr[can_buy] = profit;                
            }
            ahead = curr;
        }
        
        return ahead[1];
    }
};