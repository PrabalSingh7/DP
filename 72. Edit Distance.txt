72. Edit Distance
Hard
12.1K
140
Companies
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.
Accepted
627.6K
Submissions
1.2M
Acceptance Rate
54.3%




C++ || DYNAMIC PROGRAMMING
_prabal_singh_
100 Days Badge 2022
12
a few seconds ago
Intuition
Approach
Complexity
Time complexity : O(exponential) => O(n*m)
Space complexity : O(m)
images.jfif

Code
class Solution {
public:
    // RECURSION + TABULATION
    // int editDistanceUtil(string& S1, string& S2, int i, int j, vector<vector<int>>& dp){
    //     if(i<0)
    //         return j+1;
    //     if(j<0)
    //         return i+1;
            
    //     if(dp[i][j]!=-1) return dp[i][j];
            
    //     if(S1[i]==S2[j])
    //         return dp[i][j] =  0+editDistanceUtil(S1,S2,i-1,j-1,dp);
            
    //     // Minimum of three choices
    //     else return dp[i][j] = 1+min(editDistanceUtil(S1,S2,i-1,j-1,dp),
    //     min(editDistanceUtil(S1,S2,i-1,j,dp),editDistanceUtil(S1,S2,i,j-1,dp)));    
    // }

    // int minDistance(string S1, string S2) {
    //     int n = S1.size();
    //     int m = S2.size();
        
    //     vector<vector<int>> dp(n,vector<int>(m,-1));
    //     return editDistanceUtil(S1,S2,n-1,m-1,dp);
    // }


    // //TABULATION
    // int minDistance(string S1, string S2) {
    
    //     int n = S1.size();
    //     int m = S2.size();
        
    //     vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        
    //     for(int i=0;i<=n;i++){
    //         dp[i][0] = i;
    //     }
    //     for(int j=0;j<=m;j++){
    //         dp[0][j] = j;
    //     }
        
    //     for(int i=1;i<n+1;i++){
    //         for(int j=1;j<m+1;j++){
    //             if(S1[i-1]==S2[j-1])
    //                 dp[i][j] = 0+dp[i-1][j-1];
                
    //             else dp[i][j] = 1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
    //         }
    //     }
        
    //     return dp[n][m];
    
    // }


    //TABULATION + Space Optimization
    int minDistance(string S1, string S2) {
        int n = S1.size();
        int m = S2.size();
        
        vector<int> prev(m+1,0);
        vector<int> cur(m+1,0);
        
        for(int j=0;j<=m;j++){
            prev[j] = j;
        }
        
        for(int i=1;i<n+1;i++){
            cur[0]=i;
            for(int j=1;j<m+1;j++){
                if(S1[i-1]==S2[j-1])
                    cur[j] = 0+prev[j-1];
                
                else cur[j] = 1+min(prev[j-1],min(prev[j],cur[j-1]));
            }
            prev = cur;
        }
        
        return prev[m];

    }
};